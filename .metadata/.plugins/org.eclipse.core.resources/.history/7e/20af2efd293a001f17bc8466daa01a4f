package com.example.demo;

import org.springframework.web.bind.annotation.RestController;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import dev.langchain4j.data.embedding.Embedding;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.google.common.base.Splitter;

import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.memory.chat.MessageWindowChatMemory;
import dev.langchain4j.model.embedding.AllMiniLmL6V2EmbeddingModel;
import dev.langchain4j.model.openai.OpenAiChatModel;
import dev.langchain4j.service.AiServices;
import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.store.embedding.EmbeddingMatch;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.pgvector.PgVectorEmbeddingStore;
import jakarta.servlet.http.HttpSession;
import com.google.common.collect.Lists;

@RestController
public class SpringAICtrl {
	private String key = "demo";
	private OpenAiChatModel model;
	private EmbeddingStore<TextSegment> embeddingStore;
	private EmbeddingModel embeddingModel;

	@Value("classpath:document/these.pdf")
	private Resource resourcePDF;

	// assistant chat
	interface Assistant {
		String chat(String userMessage);
	}

	// constructeur et initialisation des variable
	public SpringAICtrl() {
		embeddingStore = PgVectorEmbeddingStore.builder().host("localhost").port(5432).database("SpringAI")
				.user("postgres").password("admin").table("docData").dimension(1000).build();
		embeddingModel = new AllMiniLmL6V2EmbeddingModel();
		model = OpenAiChatModel.builder().modelName("gpt-3.5-turbo").apiKey(key).build();

	}
	// Embedding document pdf
	@GetMapping("/embedding/data")
	public String embeddingData() {
		try {
			// lire le document PDF
			PDDocument document = PDDocument.load(resourcePDF.getInputStream());
			PDFTextStripper textStripper = new PDFTextStripper();
			String text = textStripper.getText(document);
			document.close();

			// tokenizer le texte en utilisent le chuncks
			List<String> textTokenizers = Lists.newArrayList(Splitter.fixedLength(1000).split(text));

			// vectoriser le document et enregistrer dans la base de donnes vector
			for (String tokens : textTokenizers) {
				TextSegment segment = TextSegment.from(tokens);
				Embedding embedding = embeddingModel.embed(segment).content();
				embeddingStore.add(embedding);
			}
			return "train ok";
		} catch (Exception e) {
			// TODO: handle exception
			return" train ko" ;
		}
	}
	@GetMapping("/chat/embedding/data/pdf")
	public String chatDocumentPdf(@RequestParam String userMessage) {
		//recherche de similiarité dans la BDD
		Embedding queryEmebdding=embeddingModel.embed(userMessage).content();
		List<EmbeddingMatch<TextSegment>>retreiveDB=embeddingStore.findRelevant(queryEmebdding, 1);
		String context="";
		if (!retreiveDB.isEmpty()) {
			EmbeddingMatch<TextSegment>embeddingMatch=retreiveDB.get(0);
			context=embeddingMatch.embedded().text();
		}
		//on va interroger le model LLMs à partir de la context
		Assistant assistant=AiServices.builder(Assistant.class).chatLanguageModel(model).build();
		String response=assistant.chat(userMessage+" Contexte "+context);
		return response;
	}
	
	
	
	
	
	
	
	
	
	
	

}
